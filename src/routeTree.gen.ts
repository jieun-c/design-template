/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ShowcaseImport } from './routes/showcase'
import { Route as PublicImport } from './routes/public'
import { Route as DefaultStyleImport } from './routes/default-style'
import { Route as IndexImport } from './routes/index'
import { Route as ListIndexImport } from './routes/list/index'
import { Route as ListDetailImport } from './routes/list/detail'

// Create/Update Routes

const ShowcaseRoute = ShowcaseImport.update({
  id: '/showcase',
  path: '/showcase',
  getParentRoute: () => rootRoute,
} as any)

const PublicRoute = PublicImport.update({
  id: '/public',
  path: '/public',
  getParentRoute: () => rootRoute,
} as any)

const DefaultStyleRoute = DefaultStyleImport.update({
  id: '/default-style',
  path: '/default-style',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ListIndexRoute = ListIndexImport.update({
  id: '/list/',
  path: '/list/',
  getParentRoute: () => rootRoute,
} as any)

const ListDetailRoute = ListDetailImport.update({
  id: '/list/detail',
  path: '/list/detail',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/default-style': {
      id: '/default-style'
      path: '/default-style'
      fullPath: '/default-style'
      preLoaderRoute: typeof DefaultStyleImport
      parentRoute: typeof rootRoute
    }
    '/public': {
      id: '/public'
      path: '/public'
      fullPath: '/public'
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/showcase': {
      id: '/showcase'
      path: '/showcase'
      fullPath: '/showcase'
      preLoaderRoute: typeof ShowcaseImport
      parentRoute: typeof rootRoute
    }
    '/list/detail': {
      id: '/list/detail'
      path: '/list/detail'
      fullPath: '/list/detail'
      preLoaderRoute: typeof ListDetailImport
      parentRoute: typeof rootRoute
    }
    '/list/': {
      id: '/list/'
      path: '/list'
      fullPath: '/list'
      preLoaderRoute: typeof ListIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/default-style': typeof DefaultStyleRoute
  '/public': typeof PublicRoute
  '/showcase': typeof ShowcaseRoute
  '/list/detail': typeof ListDetailRoute
  '/list': typeof ListIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/default-style': typeof DefaultStyleRoute
  '/public': typeof PublicRoute
  '/showcase': typeof ShowcaseRoute
  '/list/detail': typeof ListDetailRoute
  '/list': typeof ListIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/default-style': typeof DefaultStyleRoute
  '/public': typeof PublicRoute
  '/showcase': typeof ShowcaseRoute
  '/list/detail': typeof ListDetailRoute
  '/list/': typeof ListIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/default-style'
    | '/public'
    | '/showcase'
    | '/list/detail'
    | '/list'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/default-style'
    | '/public'
    | '/showcase'
    | '/list/detail'
    | '/list'
  id:
    | '__root__'
    | '/'
    | '/default-style'
    | '/public'
    | '/showcase'
    | '/list/detail'
    | '/list/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DefaultStyleRoute: typeof DefaultStyleRoute
  PublicRoute: typeof PublicRoute
  ShowcaseRoute: typeof ShowcaseRoute
  ListDetailRoute: typeof ListDetailRoute
  ListIndexRoute: typeof ListIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DefaultStyleRoute: DefaultStyleRoute,
  PublicRoute: PublicRoute,
  ShowcaseRoute: ShowcaseRoute,
  ListDetailRoute: ListDetailRoute,
  ListIndexRoute: ListIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/default-style",
        "/public",
        "/showcase",
        "/list/detail",
        "/list/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/default-style": {
      "filePath": "default-style.tsx"
    },
    "/public": {
      "filePath": "public.tsx"
    },
    "/showcase": {
      "filePath": "showcase.tsx"
    },
    "/list/detail": {
      "filePath": "list/detail.tsx"
    },
    "/list/": {
      "filePath": "list/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
